#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import requests
import json
from typing import List, Dict, Any

def search_huggingface_datasets(query: str, limit: int = 50) -> List[Dict[str, Any]]:
    """–ü–æ–∏—Å–∫ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –Ω–∞ Hugging Face"""
    url = "https://huggingface.co/api/datasets"
    params = {
        "search": query,
        "limit": limit,
        "full": "true"
    }
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤: {e}")
        return []

def search_huggingface_models(query: str, limit: int = 50) -> List[Dict[str, Any]]:
    """–ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π –Ω–∞ Hugging Face"""
    url = "https://huggingface.co/api/models"
    params = {
        "search": query,
        "limit": limit,
        "full": "true"
    }
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–æ–¥–µ–ª–µ–π: {e}")
        return []

def print_detailed_dataset_info(dataset: Dict[str, Any]) -> None:
    """–í—ã–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–∞—Å–µ—Ç–µ"""
    print(f"üìä {dataset.get('id', 'N/A')}")
    print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {dataset.get('description', 'N/A')[:150]}...")
    print(f"   –ó–∞–≥—Ä—É–∑–∫–∏: {dataset.get('downloads', 0):,}")
    print(f"   –õ–∞–π–∫–∏: {dataset.get('likes', 0)}")
    print(f"   –†–∞–∑–º–µ—Ä: {dataset.get('size_categories', 'N/A')}")
    print(f"   –§–æ—Ä–º–∞—Ç: {dataset.get('format', 'N/A')}")
    print(f"   –¢–µ–≥–∏: {', '.join(dataset.get('tags', [])[:5])}")
    print()

def print_detailed_model_info(model: Dict[str, Any]) -> None:
    """–í—ã–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏"""
    print(f"ü§ñ {model.get('id', 'N/A')}")
    print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {model.get('description', 'N/A')[:150]}...")
    print(f"   –ó–∞–≥—Ä—É–∑–∫–∏: {model.get('downloads', 0):,}")
    print(f"   –õ–∞–π–∫–∏: {model.get('likes', 0)}")
    print(f"   –¢–µ–≥–∏: {', '.join(model.get('tags', [])[:5])}")
    print()

def main():
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ê–¢–ê–°–ï–¢–û–í –ò –ú–û–î–ï–õ–ï–ô –í –û–ë–õ–ê–°–¢–ò –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–û–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò\n")
    
    # 1. –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º
    print("=" * 80)
    print("üîí –ú–û–î–ï–õ–ò –ü–û –ö–ò–ë–ï–†–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò (CYBERSECURITY)")
    print("=" * 80)
    
    cybersecurity_models = search_huggingface_models("cybersecurity", 15)
    if cybersecurity_models:
        for model in cybersecurity_models[:10]:
            print_detailed_model_info(model)
    else:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    print("=" * 80)
    print("üõ°Ô∏è –ú–û–î–ï–õ–ò –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò (SECURITY)")
    print("=" * 80)
    
    security_models = search_huggingface_models("security", 15)
    if security_models:
        for model in security_models[:10]:
            print_detailed_model_info(model)
    else:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    print("=" * 80)
    print("üîç –ú–û–î–ï–õ–ò –ü–û –£–Ø–ó–í–ò–ú–û–°–¢–Ø–ú (VULNERABILITY)")
    print("=" * 80)
    
    vuln_models = search_huggingface_models("vulnerability", 15)
    if vuln_models:
        for model in vuln_models[:10]:
            print_detailed_model_info(model)
    else:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π –ø–æ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º")
    
    # 2. –ü–æ–∏—Å–∫ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º
    print("=" * 80)
    print("üõ°Ô∏è –î–ê–¢–ê–°–ï–¢–´ –ü–û –ö–ò–ë–ï–†–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò (CYBERSECURITY)")
    print("=" * 80)
    
    cybersec_datasets = search_huggingface_datasets("cybersecurity", 15)
    if cybersec_datasets:
        for dataset in cybersec_datasets[:10]:
            print_detailed_dataset_info(dataset)
    else:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    print("=" * 80)
    print("üîí –î–ê–¢–ê–°–ï–¢–´ –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò (SECURITY)")
    print("=" * 80)
    
    security_datasets = search_huggingface_datasets("security", 15)
    if security_datasets:
        for dataset in security_datasets[:10]:
            print_detailed_dataset_info(dataset)
    else:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    # 3. –ü–æ–∏—Å–∫ –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º —Ç–µ–º–∞–º
    print("=" * 80)
    print("üíª –î–ê–¢–ê–°–ï–¢–´ –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ö–û–î–ê (CODE SECURITY)")
    print("=" * 80)
    
    code_security_datasets = search_huggingface_datasets("code security OR secure coding", 10)
    if code_security_datasets:
        for dataset in code_security_datasets[:8]:
            print_detailed_dataset_info(dataset)
    else:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞")
    
    print("=" * 80)
    print("üîê –î–ê–¢–ê–°–ï–¢–´ –ü–û –ú–ê–õ–í–ê–†–ò (MALWARE)")
    print("=" * 80)
    
    malware_datasets = search_huggingface_datasets("malware", 10)
    if malware_datasets:
        for dataset in malware_datasets[:8]:
            print_detailed_dataset_info(dataset)
    else:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –ø–æ –º–∞–ª–≤–∞—Ä–∏")
    
    print("=" * 80)
    print("üåê –î–ê–¢–ê–°–ï–¢–´ –ü–û –°–ï–¢–ï–í–û–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò (NETWORK SECURITY)")
    print("=" * 80)
    
    network_security_datasets = search_huggingface_datasets("network security", 10)
    if network_security_datasets:
        for dataset in network_security_datasets[:8]:
            print_detailed_dataset_info(dataset)
    else:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –ø–æ —Å–µ—Ç–µ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

if __name__ == "__main__":
    main()