#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import requests
import json
from typing import List, Dict, Any

def search_huggingface_datasets(query: str, limit: int = 50) -> List[Dict[str, Any]]:
    """–ü–æ–∏—Å–∫ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –Ω–∞ Hugging Face"""
    url = "https://huggingface.co/api/datasets"
    params = {
        "search": query,
        "limit": limit,
        "full": "true"
    }
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤: {e}")
        return []

def search_huggingface_models(query: str, limit: int = 50) -> List[Dict[str, Any]]:
    """–ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π –Ω–∞ Hugging Face"""
    url = "https://huggingface.co/api/models"
    params = {
        "search": query,
        "limit": limit,
        "full": "true"
    }
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–æ–¥–µ–ª–µ–π: {e}")
        return []

def get_circl_datasets() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞—Ç–∞—Å–µ—Ç—ã CIRCL"""
    url = "https://huggingface.co/api/datasets"
    params = {
        "author": "CIRCL",
        "limit": 100,
        "full": "true"
    }
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ CIRCL: {e}")
        return []

def get_circl_models() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏ CIRCL"""
    url = "https://huggingface.co/api/models"
    params = {
        "author": "CIRCL",
        "limit": 100,
        "full": "true"
    }
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π CIRCL: {e}")
        return []

def print_dataset_info(dataset: Dict[str, Any]) -> None:
    """–í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–∞—Å–µ—Ç–µ"""
    print(f"üìä {dataset.get('id', 'N/A')}")
    print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {dataset.get('description', 'N/A')[:100]}...")
    print(f"   –ó–∞–≥—Ä—É–∑–∫–∏: {dataset.get('downloads', 0):,}")
    print(f"   –õ–∞–π–∫–∏: {dataset.get('likes', 0)}")
    print(f"   –¢–µ–≥–∏: {', '.join(dataset.get('tags', []))}")
    print()

def print_model_info(model: Dict[str, Any]) -> None:
    """–í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏"""
    print(f"ü§ñ {model.get('id', 'N/A')}")
    print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {model.get('description', 'N/A')[:100]}...")
    print(f"   –ó–∞–≥—Ä—É–∑–∫–∏: {model.get('downloads', 0):,}")
    print(f"   –õ–∞–π–∫–∏: {model.get('likes', 0)}")
    print(f"   –¢–µ–≥–∏: {', '.join(model.get('tags', []))}")
    print()

def main():
    print("üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n")
    
    # 1. –î–∞—Ç–∞—Å–µ—Ç—ã CIRCL
    print("=" * 80)
    print("üìä –î–ê–¢–ê–°–ï–¢–´ CIRCL")
    print("=" * 80)
    
    circl_datasets = get_circl_datasets()
    if circl_datasets:
        for dataset in circl_datasets:
            print_dataset_info(dataset)
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç—ã CIRCL")
    
    # 2. –ú–æ–¥–µ–ª–∏ CIRCL
    print("=" * 80)
    print("ü§ñ –ú–û–î–ï–õ–ò CIRCL")
    print("=" * 80)
    
    circl_models = get_circl_models()
    if circl_models:
        for model in circl_models:
            print_model_info(model)
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ CIRCL")
    
    # 3. –ü–æ–∏—Å–∫ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –ø–æ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º
    print("=" * 80)
    print("üîç –î–ê–¢–ê–°–ï–¢–´ –ü–û –£–Ø–ó–í–ò–ú–û–°–¢–Ø–ú (VULNERABILITY)")
    print("=" * 80)
    
    vuln_datasets = search_huggingface_datasets("vulnerability", 20)
    if vuln_datasets:
        for dataset in vuln_datasets[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print_dataset_info(dataset)
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞—Ç–∞—Å–µ—Ç—ã –ø–æ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º")
    
    # 4. –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print("=" * 80)
    print("üîí –ú–û–î–ï–õ–ò –ü–û –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–û–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    print("=" * 80)
    
    security_models = search_huggingface_models("cybersecurity OR security OR vulnerability", 20)
    if security_models:
        for model in security_models[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print_model_info(model)
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥–µ–ª–∏ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    # 5. –ü–æ–∏—Å–∫ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print("=" * 80)
    print("üõ°Ô∏è –î–ê–¢–ê–°–ï–¢–´ –ü–û –ö–ò–ë–ï–†–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    print("=" * 80)
    
    cybersec_datasets = search_huggingface_datasets("cybersecurity OR security", 20)
    if cybersec_datasets:
        for dataset in cybersec_datasets[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print_dataset_info(dataset)
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞—Ç–∞—Å–µ—Ç—ã –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

if __name__ == "__main__":
    main()